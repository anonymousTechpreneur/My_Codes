# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FashionHub.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#"D:/Study/Python/O/New-Made-Sublimation-Printed-Sample-Polo-Shirt_prev_ui.png","D:/Study/Python/O/file-TEDBdEzZvt_prev_ui.png",
#"D:/Study/Python/O/1000009928218-Blue-Blue-1000009928218_01-1200_prev_ui.png","D:/Study/Python/Webp.net-resizeimage.png",
#"D:/Study/Python/O/demo_tshirtecommerce_f315177998825a77c9ca96892-1000x1250h_prev_ui.png","D:/Study/Python/Martin_Garrix_MG_ME_01_01_Black_Back.png"
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import math
import cv2.aruco as aruco

design=0
des_list=["E:/Project - Fashion Hub/12_prev_ui.png",
          "E:/Project - Fashion Hub/Martin_Garrix_MG_ME_01_01_Black_Back.png",
          "E:/Project - Fashion Hub/Webp.net-resizeimage.png",
          "E:/Project - Fashion Hub/demo_tshirtecommerce_f315177998825a77c9ca96892-1000x1250h_prev_ui.png",
          "E:/Project - Fashion Hub/New-Made-Sublimation-Printed-Sample-Polo-Shirt_prev_ui.png",
          "E:/Project - Fashion Hub/1000009928218-Blue-Blue-1000009928218_01-1200_prev_ui.png",
          "E:/Project - Fashion Hub/file-TEDBdEzZvt_prev_ui.png"]


def age_gender(img1):

    age_model = cv2.dnn.readNetFromCaffe("age.prototxt", "dex_chalearn_iccv2015.caffemodel")
    gender_model = cv2.dnn.readNetFromCaffe("gender.prototxt", "gender.caffemodel")

    img = cv2.imread(img1)

    haar_detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

    def detect_faces(img):
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        face = haar_detector.detectMultiScale(gray, 1.3, 5)
        return face

    faces = detect_faces(img)
    for x, y, w, h in faces:
        detected_face = img[int(y):int(y + h), int(x):int(x + w)]
        detected_face = cv2.resize(detected_face, (224, 224))  # img shape is (224, 224, 3) now
        img_blob = cv2.dnn.blobFromImage(detected_face)  # img_blob shape is (1, 3, 224, 224)

        age_model.setInput(img_blob)
        age_dist = age_model.forward()[0]
        gender_model.setInput(img_blob)
        gender_class = gender_model.forward()[0]
        output_indexes = np.array([i for i in range(0, 101)])
        apparent_predictions = round(np.sum(age_dist * output_indexes), 2)
        gender = 'Woman ' if np.argmax(gender_class) == 0 else 'Man'

    return (apparent_predictions, gender)

def measurements(img,gender):
    msize_chart = [["S", 40.64, ], ["M", 43.18], ["L", 44.45], ["XL", 45.72], ["XXL", 46.99]]
    fsize_chart = [["XS", 34.29], ["S", 36.83], ["M", 39.37], ["L", 41.91], ["XL", 44.45]]
    MODE = "MPI"

    if MODE == "COCO":
        protoFile = "pose_deploy_linevec.prototxt"
        weightsFile = "pose_iter_440000.caffemodel"
        nPoints = 18
        POSE_PAIRS = [[1, 0], [1, 2], [1, 5], [2, 3], [3, 4], [5, 6], [6, 7], [1, 8], [8, 9], [9, 10], [1, 11],
                      [11, 12], [12, 13], [0, 14], [0, 15], [14, 16], [15, 17]]

    elif MODE == "MPI":
        protoFile = "pose_deploy_linevec_faster_4_stages.prototxt"
        weightsFile = "pose_iter_160000.caffemodel"
        nPoints = 15
        POSE_PAIRS = [[0, 1], [1, 2], [2, 3], [3, 4], [1, 5], [5, 6], [6, 7], [1, 14], [14, 8], [8, 9], [9, 10],
                      [14, 11], [11, 12], [12, 13]]

    frame = cv2.imread(img)
    frameCopy = np.copy(frame)
    frameWidth = frame.shape[1]
    frameHeight = frame.shape[0]
    threshold = 0.1
    net = cv2.dnn.readNetFromCaffe(protoFile, weightsFile)
    net.setPreferableBackend(cv2.dnn.DNN_TARGET_CPU)
    inWidth = 368
    inHeight = 368
    inpBlob = cv2.dnn.blobFromImage(frame, 1.0 / 255, (inWidth, inHeight),
                                    (0, 0, 0), swapRB=False, crop=False)

    net.setInput(inpBlob)

    output = net.forward()

    H = output.shape[2]
    W = output.shape[3]

    points = []

    for i in range(nPoints):

        probMap = output[0, i, :, :]

        minVal, prob, minLoc, point = cv2.minMaxLoc(probMap)

        x = (frameWidth * point[0]) / W
        y = (frameHeight * point[1]) / H

        if prob > threshold:
            cv2.circle(frameCopy, (int(x), int(y)), 8, (0, 255, 255), thickness=-1, lineType=cv2.FILLED)
            cv2.putText(frameCopy, "{}".format(i), (int(x), int(y)), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2,
                        lineType=cv2.LINE_AA)

            points.append((int(x), int(y)))
        else:
            points.append((0,0))
    scale = findArucoMarkers(img)
    if(gender== "Man"):
        sd = ((math.sqrt((points[2][0] - points[1][0]) ** 2 + (points[2][1] - points[1][1]) ** 2)) + (math.sqrt((points[1][0] - points[5][0]) ** 2 + (points[1][1] - points[5][1]) ** 2)))
        sd = math.ceil(sd/scale)
        #print("ssss: ",sd)
        for i in msize_chart:
            a = i[1]
            if ((a - sd) > 0) or i[0]=="XXL":
                finl = i[0]
                break
        #print("Shoulder length=",sd)
        print("Suggested Shirt size=", finl)


    else:
        sd = ((math.sqrt((points[2][0] - points[1][0]) ** 2 + (points[2][1] - points[1][1]) ** 2)) + (math.sqrt((points[1][0] - points[5][0]) ** 2 + (points[1][1] - points[5][1]) ** 2)))
        sd = math.ceil(sd/scale)
        for i in fsize_chart:
            a = i[1]
            if ((a - sd) > 0 or i[0]=="XL"):
                finl = i[0]
                break
        print("Suggested Top Size=", finl)

    return finl



def tryon(img_green,design1):
    frame = cv2.imread(img_green)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of green color in HSV
    lower_green = np.array([25, 52, 72])
    upper_green = np.array([102, 255, 255])
    # Threshold the HSV image to get only blue colors
    mask_white = cv2.inRange(hsv, lower_green, upper_green)
    mask_black = cv2.bitwise_not(mask_white)

    # converting mask_black to 3 channels
    W, L = mask_black.shape
    mask_black_3CH = np.empty((W, L, 3), dtype=np.uint8)
    mask_black_3CH[:, :, 0] = mask_black
    mask_black_3CH[:, :, 1] = mask_black
    mask_black_3CH[:, :, 2] = mask_black

    dst3 = cv2.bitwise_and(mask_black_3CH, frame)

    # ///////
    W, L = mask_white.shape
    mask_white_3CH = np.empty((W, L, 3), dtype=np.uint8)
    mask_white_3CH[:, :, 0] = mask_white
    mask_white_3CH[:, :, 1] = mask_white
    mask_white_3CH[:, :, 2] = mask_white

    dst3_wh = cv2.bitwise_or(mask_white_3CH, dst3)

    # /////////////////

    # changing for design
    design = cv2.imread(design1)
    design = cv2.resize(design, mask_black.shape[1::-1])

    design_mask_mixed = cv2.bitwise_or(mask_black_3CH, design)

    final_mask_black_3CH = cv2.bitwise_and(design_mask_mixed, dst3_wh)
    cv2.imwrite('final_out.jpg', final_mask_black_3CH)
    out_path="E:/Project - Fashion Hub/final_out.jpg"

    #cv2.imshow('final_out', final_mask_black_3CH)

    #cv2.waitKey()
    return out_path

def findArucoMarkers(img1,markerSize=4,totalMarkers=250,draw=True):
    img = cv2.imread(img1,cv2.IMREAD_COLOR)
    imgGray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    key=getattr(aruco,f'DICT_{markerSize}X{markerSize}_{totalMarkers}')
    arucoDict= aruco.Dictionary_get(key)
    arucoParam=aruco.DetectorParameters_create()
    bboxs,ids,rejected=aruco.detectMarkers(imgGray,arucoDict,parameters=arucoParam)
    if draw:
        aruco.drawDetectedMarkers(img,bboxs)
        if (bboxs != []):
            int_corners = np.int0(bboxs)
            cv2.polylines(img, int_corners, True, (0, 255, 0), 5)

            aruco_perimeter = cv2.arcLength(bboxs[0], True)
            pixel_cm_ratio = aruco_perimeter / 50
        else:
            print("No ARuco found")
            return
    #print("Scalability=",pixel_cm_ratio)
    return pixel_cm_ratio

class Ui_Dialog(object):

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1200, 800)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1200, 800))
        self.widget.setStyleSheet("QWidget#widget{background-color:qlineargradient(spread:pad, x1:0.786, y1:1, x2:0.423, y2:0.0349091, stop:0.457711 rgba(65, 8, 65, 255), stop:1 rgba(162, 30, 54, 255));}")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(180, 40, 841, 131))
        font = QtGui.QFont()
        font.setFamily("Copperplate Gothic Bold")
        font.setPointSize(36)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("color:rgb(255, 255, 255);\n"
"font: 36pt \"Copperplate Gothic Bold\";")
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(470, 350, 231, 51))
        font = QtGui.QFont()
        font.setFamily("PMingLiU-ExtB")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("font: 20pt \"PMingLiU-ExtB\";color:rgb(255, 255, 255);\n"
"background-color:rgba(255, 255, 255, 55)")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(340, 140, 501, 41))
        font = QtGui.QFont()
        font.setFamily("Copperplate Gothic Light")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color:rgb(255, 255, 255);\n"
"font: 16pt \"Copperplate Gothic Light\";")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(60, 290, 270, 430))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("EJGs3crWkAIS7OV_270x430.png"))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(30, 720, 361, 51))
        self.label_4.setStyleSheet("font: 14pt \"NSimSun\";color:rgb(255, 255, 255)")
        self.label_4.setObjectName("label_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(470, 500, 231, 51))
        font = QtGui.QFont()
        font.setFamily("PMingLiU-ExtB")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("font: 20pt \"PMingLiU-ExtB\";color:rgb(255, 255, 255);\n"
"background-color:rgba(255, 255, 255, 55)")
        self.pushButton_2.setObjectName("pushButton_2")
        self.textEdit = QtWidgets.QTextEdit(self.widget)
        self.textEdit.setGeometry(QtCore.QRect(430, 600, 301, 161))
        self.textEdit.setStyleSheet("background-color:rgba(255, 255, 255, 15);\n"
"font: 63 12pt \"Lucida Fax\";color:rgb(255, 255, 255);")
        self.textEdit.setObjectName("textEdit")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(430, 580, 301, 21))
        font = QtGui.QFont()
        font.setFamily("Copperplate Gothic Light")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color:rgb(255, 255, 255);\n"
"font: 8pt \"Copperplate Gothic Light\";")
        self.label_5.setObjectName("label_5")
        self.Result_Image = QtWidgets.QLabel(self.widget)
        self.Result_Image.setGeometry(QtCore.QRect(830, 290, 270, 430))
        self.Result_Image.setStyleSheet("background-color:rgba(255, 255, 255, 15)")
        self.Result_Image.setText("")
        self.Result_Image.setObjectName("Result_Image")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(920, 720, 121, 51))
        self.label_6.setStyleSheet("font: 14pt \"NSimSun\";color:rgb(255, 255, 255)")
        self.label_6.setObjectName("label_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setGeometry(QtCore.QRect(410, 410, 341, 51))
        font = QtGui.QFont()
        font.setFamily("PMingLiU-ExtB")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("font: 20pt \"PMingLiU-ExtB\";color:rgb(255, 255, 255);\n"
"background-color:rgba(255, 255, 255, 55)")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setGeometry(QtCore.QRect(850, 220, 231, 51))
        font = QtGui.QFont()
        font.setFamily("PMingLiU-ExtB")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("font: 20pt \"PMingLiU-ExtB\";color:rgb(255, 255, 255);\n"
"background-color:rgba(255, 255, 255, 55)")
        self.pushButton_4.setObjectName("pushButton_4")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.pushButton.clicked.connect(self.loadImage1)
        self.pushButton_3.clicked.connect(self.loadImage2)
        self.pushButton_2.clicked.connect(self.style_me)
        self.pushButton_4.clicked.connect(self.change_style)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Welcome to Fashion Hub"))
        self.pushButton.setText(_translate("Dialog", "Upload Image "))
        self.label_2.setText(_translate("Dialog", "Your Personal AI Style Assistant"))
        self.label_4.setText(_translate("Dialog", "Pose like this with Aruco Tag"))
        self.pushButton_2.setText(_translate("Dialog", "Style Me"))
        self.textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Lucida Fax\'; font-size:12pt; font-weight:56; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_5.setText(_translate("Dialog", "Results"))
        self.label_6.setText(_translate("Dialog", "Your Look"))
        self.pushButton_3.setText(_translate("Dialog", "Upload Aruco Tag Image"))
        self.pushButton_4.setText(_translate("Dialog", "Change Style"))

    def loadImage1(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *jpeg *.bmp);;All Files (*)") # Ask for file
        if fileName: # If the user gives a file
            print(fileName)
            self.file=str(fileName)
            pixmap = QtGui.QPixmap(fileName) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.Result_Image.width(), self.Result_Image.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            #self.Result_Image.setPixmap(pixmap) # Set the pixmap onto the label
            #self.Result_Image.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center
            #self.textEdit.setText("Uploaded First Image")
            
    def loadImage2(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *jpeg *.bmp);;All Files (*)") # Ask for file
        if fileName: # If the user gives a file
            print(fileName)
            self.file1=str(fileName)
            pixmap = QtGui.QPixmap(fileName) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.Result_Image.width(), self.Result_Image.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            self.Result_Image.setPixmap(pixmap) # Set the pixmap onto the label
            self.Result_Image.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center
            self.textEdit.setText("Uploaded Second Image")


    def style_me(self):
        img = self.file1
        img_green= self.file
        design= r"E:\Project - Fashion Hub\Webp.net-resizeimage.png"
        agerange=[[0,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]]
        age,gender= age_gender(img)
        #print("Hello")
        for x in agerange:
                if(round(age) in range(x[0],x[1])):
                    age_range = x
                    print("Age Range - ",x)
                    break
        print("Gender-",gender)
        size = measurements(img,gender)
        out=tryon(img_green, design)
        pixmap = QtGui.QPixmap(out)  # Setup pixmap with the provided image
        pixmap = pixmap.scaled(self.Result_Image.width(), self.Result_Image.height(),
                               QtCore.Qt.KeepAspectRatio)  # Scale pixmap
        self.Result_Image.setPixmap(pixmap)  # Set the pixmap onto the label
        self.Result_Image.setAlignment(QtCore.Qt.AlignCenter)  # Align the label to center
        self.textEdit.setText("Age Range - "+str(age_range[0])+"-"+str(age_range[1]) +"\nGender - "+gender+"\nSuggested Size - "+size)

    def change_style(self):
        global design
        global des_list
        if(design>len(des_list)-1):
            design=0
        img_green = self.file
        out = tryon(img_green, des_list[design])
        pixmap = QtGui.QPixmap(out)  # Setup pixmap with the provided image
        pixmap = pixmap.scaled(self.Result_Image.width(), self.Result_Image.height(),
                               QtCore.Qt.KeepAspectRatio)  # Scale pixmap
        self.Result_Image.setPixmap(pixmap)  # Set the pixmap onto the label
        self.Result_Image.setAlignment(QtCore.Qt.AlignCenter)  # Align the label to center
        design+=1



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
